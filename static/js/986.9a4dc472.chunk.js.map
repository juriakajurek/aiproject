{"version":3,"file":"static/js/986.9a4dc472.chunk.js","mappings":"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","sources":["../node_modules/easybase-react/src/ui/Auth/components/ErrorText.tsx","../node_modules/easybase-react/src/ui/Auth/components/internal/Select.tsx","../node_modules/easybase-react/src/ui/Auth/components/GenderSelect.tsx","../node_modules/easybase-react/src/ui/Auth/pages/SignUp.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst ErrorText = styled.p(props => ({\n    marginTop: 5,\n    marginBottom: -5,\n    fontSize: 12,\n    fontWeight: 500,\n    color: 'red',\n    height: 0,\n    overflow: 'visible',\n    ...(props.theme.errorText ? { ...props.theme.errorText } : {})\n}))\n\ninterface IErrorText extends React.HTMLAttributes<HTMLParagraphElement> {\n    value?: string | undefined;\n}\n\nexport default function (props: IErrorText) {\n    if (props.value && props.value.length) {\n        return <ErrorText {...props}>{props.value}</ErrorText>\n    }\n    return <React.Fragment />\n}\n","import React from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\nimport styled from 'styled-components';\n\nconst SelectContainer = styled.div({\n    position: 'relative',\n    display: 'inline',\n    width: '100%',\n    maxWidth: '100%',\n    cursor: 'pointer',\n    '&:after': {\n        content: \"''\",\n        width: 0,\n        height: 0,\n        position: 'absolute',\n        pointerEvents: 'none',\n        top: '.3em',\n        right: '.75em',\n        borderTop: '8px solid black',\n        opacity: 0.5,\n        borderLeft: '5px solid transparent',\n        borderRight: '5px solid transparent'\n    }\n})\n\nconst Select = styled.select({\n    WebkitAppearance: 'none',\n    MozAppearance: 'none',\n    appearance: 'none',\n    padding: '1em 2em 1em 1em',\n    border: 'none',\n    width: '100%',\n    fontFamily: 'inherit',\n    fontSize: 'inherit',\n    cursor: 'pointer',\n    outline: 'none',\n    '&::-ms-expand': {\n        display: 'none'\n    }\n})\n\nconst SelectOption = styled.option(props => ({\n    width: '100%',\n    ...(props.theme.selectOption ? { ...props.theme.selectOption } : {})\n}))\n\ninterface ISelect extends React.SelectHTMLAttributes<HTMLSelectElement> {\n    options: string[];\n    id: string;\n    register(): UseFormRegisterReturn;\n}\n\nexport default function (props: ISelect) {\n    return (\n        <SelectContainer>\n            <Select {...props} {...props.register()} defaultValue=\"\">\n                <SelectOption key=\"empty-option\" value=\"\" disabled hidden style={{ display: 'none' }} />\n                {props.options.map(e => <SelectOption key={\"option\" + e}>{e}</SelectOption>)}\n            </Select>\n        </SelectContainer>\n    )\n}\n","import React from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\nimport styled from 'styled-components';\nimport Label from './internal/Label';\nimport Select from './internal/Select';\n\nconst GenderSelect = styled(Select)(props => ({\n    boxSizing: \"border-box\",\n    ...(props.theme.genderSelect ? { ...props.theme.genderSelect } : {})\n}))\n\nconst Root = styled.div({\n    position: \"relative\"\n})\n\ninterface ISelect extends React.SelectHTMLAttributes<HTMLSelectElement> {\n    register(): UseFormRegisterReturn;\n}\n\nconst GenderLabel = styled(Label)(props => ({\n    ...(props.theme.genderSelectLabel ? { ...props.theme.genderSelectLabel } : {})\n}))\n\nexport default function (props: ISelect) {\n    return (\n        <Root>\n            <GenderLabel htmlFor=\"select-gender\">Gender *</GenderLabel>\n            <GenderSelect id=\"select-gender\" {...props} options={[\"Male\", \"Female\", \"Prefer not to say\"]} />\n        </Root>\n    )\n}\n","import React, { Fragment } from 'react';\nimport Form from '../components/Form';\nimport EmailInput from '../components/EmailInput';\nimport PasswordInput from '../components/PasswordInput';\nimport HeaderText from '../components/HeaderText';\nimport SecondaryButton from '../components/SecondaryButton';\nimport SubmitButton from '../components/SubmitButton';\nimport Spacer from '../components/Spacer';\nimport ErrorText from '../components/ErrorText';\nimport GenderSelect from '../components/GenderSelect';\nimport Input from '../components/internal/Input';\nimport { useForm } from 'react-hook-form';\nimport { IPage, ISignUpFields } from '../../uiTypes';\nimport toast from 'react-hot-toast';\nimport useEasybase from '../../../useEasybase';\n\ninterface ISignUpPage extends IPage {\n    signUpFields: ISignUpFields\n}\n\nexport default function ({ setCurrentPage, dictionary, signUpFields }: ISignUpPage) {\n    const { register, handleSubmit, formState: { errors, isSubmitting }, reset } = useForm();\n    const { signUp, signIn } = useEasybase();\n\n    const onSubmit = async (formData: Record<string, string>) => {\n        if (!formData.email || !formData.password || !formData.passwordConfirm) {\n            return;\n        }\n        if (formData.password !== formData.passwordConfirm) {\n            toast.error(dictionary.errorPasswordsDoNotMatch!);\n            reset();\n            return;\n        }\n\n        const signUpAttrs = { createdAt: new Date().toISOString() };\n        for (const currField of [\"firstName\", \"lastName\", \"fullName\", \"dateOfBirth\", \"gender\", \"phoneNumber\"]) {\n            if (signUpFields[currField]) {\n                if (formData[currField]) {\n                    signUpAttrs[currField] = \"\" + formData[currField];\n                } else {\n                    toast.error(\"Missing sign up field value\");\n                    return;\n                }\n            }\n        }\n\n        const signUpRes = await signUp(formData.email, formData.password, signUpAttrs);\n        if (signUpRes.success) {\n            setCurrentPage(\"SignIn\")\n            await signIn(formData.email, formData.password)\n        } else {\n            if (signUpRes.errorCode === \"BadFormat\") {\n                reset();\n                toast.error(dictionary.errorBadInputFormat!);\n            } else if (signUpRes.errorCode === \"BadPasswordLength\") {\n                toast.error(dictionary.errorPasswordTooShort!);\n            } else if (signUpRes.errorCode === \"UserExists\") {\n                reset();\n                toast.error(dictionary.errorUserAlreadyExists!);\n            }\n        }\n    }\n\n    const passwordReqs = {\n        minLength: {\n            value: 8,\n            message: \"Password must be at least 8 characters long\"\n        },\n        maxLength: {\n            value: 100,\n            message: \"Password too long\"\n        },\n        pattern: {\n            value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,\n            message: \"Must contain a digit and uppercase and lowercase letters\"\n        }\n    }\n\n    return (\n        <Form onSubmit={handleSubmit(onSubmit)}>\n            <HeaderText>{dictionary.signUpHeader}</HeaderText>\n            <Spacer size=\"medium\" />\n\n            <EmailInput\n                register={() => register(\"email\")}\n                label={dictionary.newEmailLabel}\n                disabled={isSubmitting}\n            />\n\n            { signUpFields.firstName &&\n                <Fragment>\n                    <Spacer size=\"xlarge\" />\n                    <Input\n                        register={() => register(\"firstName\", typeof signUpFields.firstName === \"boolean\" ? {} : signUpFields.firstName)}\n                        label={dictionary.newFirstNameLabel || \"\"}\n                        disabled={isSubmitting}\n                    />\n                    <ErrorText value={errors.firstName?.message} />\n                </Fragment>\n            }\n\n            { signUpFields.lastName &&\n                <Fragment>\n                    <Spacer size=\"xlarge\" />\n                    <Input\n                        register={() => register(\"lastName\", typeof signUpFields.lastName === \"boolean\" ? {} : signUpFields.lastName)}\n                        label={dictionary.newLastNameLabel || \"\"}\n                        disabled={isSubmitting}\n                    />\n                    <ErrorText value={errors.lastName?.message} />\n                </Fragment>\n            }\n\n            { signUpFields.fullName &&\n                <Fragment>\n                    <Spacer size=\"xlarge\" />\n                    <Input\n                        register={() => register(\"fullName\", typeof signUpFields.fullName === \"boolean\" ? {} : signUpFields.fullName)}\n                        label={dictionary.newFullNameLabel || \"\"}\n                        disabled={isSubmitting}\n                    />\n                    <ErrorText value={errors.fullName?.message} />\n                </Fragment>\n            }\n\n            { signUpFields.dateOfBirth &&\n                <Fragment>\n                    <Spacer size=\"xlarge\" />\n                    <Input\n                        type=\"date\"\n                        register={() => register(\"dateOfBirth\", typeof signUpFields.dateOfBirth === \"boolean\" ? {} : signUpFields.dateOfBirth)}\n                        label={dictionary.newDateOfBirthLabel || \"\"}\n                        disabled={isSubmitting}\n                        style={{ overflow: \"hidden\" }}\n                    />\n                    <ErrorText value={errors.dateOfBirth?.message} />\n                </Fragment>\n            }\n\n            { signUpFields.gender &&\n                <Fragment>\n                    <Spacer size=\"xlarge\" />\n                    <GenderSelect\n                        register={() => register(\"gender\", typeof signUpFields.gender === \"boolean\" ? {} : signUpFields.gender)}\n                        disabled={isSubmitting}\n                    />\n                    <ErrorText value={errors.gender?.message} />\n                </Fragment>\n            }\n\n            { signUpFields.phoneNumber &&\n                <Fragment>\n                    <Spacer size=\"xlarge\" />\n                    <Input\n                        type=\"tel\"\n                        label={dictionary.newPhoneNumberLabel || \"\"}\n                        register={() => register(\"phoneNumber\", typeof signUpFields.phoneNumber === \"boolean\" ? {} : signUpFields.phoneNumber)}\n                        disabled={isSubmitting}\n                    />\n                    <ErrorText value={errors.phoneNumber?.message} />\n                </Fragment>\n            }\n\n            <Spacer size=\"xlarge\" />\n            <PasswordInput\n                register={() => register(\"password\", passwordReqs)}\n                label={dictionary.newPasswordLabel}\n                autoComplete=\"new-password\"\n                disabled={isSubmitting}\n            />\n            <ErrorText value={errors.password?.message} />\n            <Spacer size=\"xlarge\" />\n            <PasswordInput\n                register={() => register(\"passwordConfirm\", passwordReqs)}\n                label={dictionary.confirmNewPasswordLabel}\n                autoComplete=\"new-password\"\n                disabled={isSubmitting}\n            />\n            <ErrorText value={errors.passwordConfirm?.message} />\n\n            <Spacer size=\"xlarge\" />\n            <SubmitButton disabled={isSubmitting}>{dictionary.signUpSubmitButton}</SubmitButton>\n            <SecondaryButton onClick={_ => setCurrentPage(\"SignIn\")} disabled={isSubmitting}>{dictionary.backToSignIn}</SecondaryButton>\n        </Form>\n    )\n}\n"],"names":["ErrorText","styled","props","marginTop","marginBottom","fontSize","fontWeight","color","height","overflow","React","SelectContainer","s","position","display","width","maxWidth","cursor","content","pointerEvents","top","right","borderTop","opacity","borderLeft","borderRight","Select","WebkitAppearance","MozAppearance","appearance","padding","border","fontFamily","outline","SelectOption","GenderSelect","defaultValue","key","value","disabled","hidden","style","e","boxSizing","Root","GenderLabel","htmlFor","id","options","signUpFields","useForm","formState","isSubmitting","reset","useEasybase","signIn","onSubmit","formData","toast","dictionary","signUpAttrs","createdAt","Date","toISOString","signUp","signUpRes","setCurrentPage","passwordReqs","minLength","message","maxLength","pattern","handleSubmit","size","register","label","newEmailLabel","errors","type","newPasswordLabel","autoComplete","confirmNewPasswordLabel","onClick","_"],"sourceRoot":""}