{"version":3,"file":"static/js/897.63741bd9.chunk.js","mappings":"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","sources":["../node_modules/easybase-react/src/ui/Auth/components/ErrorText.tsx","../node_modules/easybase-react/src/ui/Auth/components/SecondaryText.tsx","../node_modules/easybase-react/src/ui/Auth/pages/ForgotPassword.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst ErrorText = styled.p(props => ({\n    marginTop: 5,\n    marginBottom: -5,\n    fontSize: 12,\n    fontWeight: 500,\n    color: 'red',\n    height: 0,\n    overflow: 'visible',\n    ...(props.theme.errorText ? { ...props.theme.errorText } : {})\n}))\n\ninterface IErrorText extends React.HTMLAttributes<HTMLParagraphElement> {\n    value?: string | undefined;\n}\n\nexport default function (props: IErrorText) {\n    if (props.value && props.value.length) {\n        return <ErrorText {...props}>{props.value}</ErrorText>\n    }\n    return <React.Fragment />\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst SecondaryText = styled.h2(props => ({\n    fontFamily: \"inherit\",\n    fontSize: 15,\n    fontWeight: 300,\n    letterSpacing: -.2,\n    lineHeight: '20px',\n    whiteSpace: 'normal',\n    ...(props.theme.secondaryText ? { ...props.theme.secondaryText } : {})\n}))\n\nexport default function (props: React.HTMLAttributes<HTMLHeadingElement>) {\n    return (\n        <SecondaryText {...props} />\n    )\n}\n","import React, { useState } from 'react';\nimport Form from '../components/Form';\nimport EmailInput from '../components/EmailInput';\nimport HeaderText from '../components/HeaderText';\nimport SecondaryText from '../components/SecondaryText';\nimport SecondaryButton from '../components/SecondaryButton';\nimport SubmitButton from '../components/SubmitButton';\nimport Spacer from '../components/Spacer';\nimport { useForm } from 'react-hook-form';\nimport { IPage } from '../../uiTypes';\nimport toast from 'react-hot-toast';\nimport ErrorText from '../components/ErrorText';\nimport Input from '../components/internal/Input';\nimport PasswordInput from '../components/PasswordInput';\nimport useEasybase from '../../../useEasybase';\n\nexport default function ({ setCurrentPage, dictionary, emailTemplate }: IPage) {\n    const [onConfirm, setOnConfirm] = useState<boolean>(false);\n    const [forgottenUsername, setForgottenUsername] = useState<string | undefined>();\n    const { register, handleSubmit, reset, formState: { errors, isSubmitting } } = useForm();\n    const { forgotPassword, forgotPasswordConfirm } = useEasybase();\n\n    const onSubmit = async (formData: Record<string, string>) => {\n        if (!formData.email) {\n            return;\n        }\n\n        const forgotRes = await forgotPassword(formData.email, emailTemplate);\n        if (forgotRes.success) {\n            setForgottenUsername(formData.email);\n            setOnConfirm(true);\n            toast.success('Check your email for a verification code')\n        } else {\n            if (forgotRes.errorCode === \"RequestLimitExceeded\") {\n                toast.error(dictionary.errorRequestLimitExceeded!);\n            } else if (forgotRes.errorCode === \"BadFormat\") {\n                reset();\n                toast.error(dictionary.errorBadInputFormat!);\n            } else if (forgotRes.errorCode === \"NoUserExists\") {\n                reset();\n                toast.error(dictionary.errorNoAccountFound!);\n            } else {\n                reset();\n                toast.error('Bad request');\n            }\n        }\n    }\n\n    const onConfirmSubmit = async (formData: Record<string, string>) => {\n        if (!formData.code || !formData.newPassword || !forgottenUsername) {\n            return;\n        }\n        const forgotConfirmRes = await forgotPasswordConfirm(formData.code, forgottenUsername, formData.newPassword)\n        if (forgotConfirmRes.success) {\n            setOnConfirm(false);\n            setForgottenUsername(\"\");\n            setCurrentPage('SignIn');\n            toast.success('Password successfully changed')\n        } else {\n            if (forgotConfirmRes.errorCode === \"BadPasswordLength\") {\n                toast.error(dictionary.errorPasswordTooShort!);\n            } else if (forgotConfirmRes.errorCode === \"BadFormat\") {\n                reset();\n                toast.error(dictionary.errorBadInputFormat!);\n            } else if (forgotConfirmRes.errorCode === \"NoUserExists\") {\n                reset();\n                toast.error(dictionary.errorNoAccountFound!);\n            } else if (forgotConfirmRes.errorCode === \"WrongVerificationCode\") {\n                toast.error(dictionary.errorWrongVerificationCode!);\n            } else {\n                toast.error('Bad request');\n            }\n        }\n    }\n\n    const passwordReqs = {\n        minLength: {\n            value: 8,\n            message: \"Password must be at least 8 characters long\"\n        },\n        maxLength: {\n            value: 100,\n            message: \"Password too long\"\n        },\n        pattern: {\n            value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,\n            message: \"Must contain a digit and uppercase and lowercase letters\"\n        }\n    }\n\n    const codeReqs = {\n        minLength: {\n            value: 8,\n            message: \"Incorrect code length\"\n        }\n    }\n\n    if (!onConfirm) {\n        return (\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                <HeaderText>{dictionary.forgotPasswordHeader}</HeaderText>\n                <SecondaryText>{dictionary.forgotPasswordSecondaryHeader}</SecondaryText>\n                <Spacer size=\"medium\" />\n                <EmailInput\n                    register={() => register(\"email\")}\n                    label={dictionary.newEmailLabel}\n                    disabled={isSubmitting}\n                />\n                <Spacer size=\"medium\" />\n                <SubmitButton disabled={isSubmitting}>{dictionary.forgotPasswordSubmitButton}</SubmitButton>\n                <SecondaryButton onClick={_ => setCurrentPage(\"SignIn\")} disabled={isSubmitting}>{dictionary.backToSignIn}</SecondaryButton>\n            </Form>\n        )\n    } else {\n        return (\n            <Form onSubmit={handleSubmit(onConfirmSubmit)}>\n                <HeaderText>{dictionary.forgotPasswordConfirmHeader}</HeaderText>\n                <Spacer size=\"medium\" />\n                <Input\n                    register={() => register(\"code\", codeReqs)}\n                    label={dictionary.codeLabel!}\n                    disabled={isSubmitting}\n                />\n                <ErrorText value={errors.code?.message} />\n                <Spacer size=\"xlarge\" />\n                <PasswordInput\n                    register={() => register(\"newPassword\", passwordReqs)}\n                    label={dictionary.forgotPasswordConfirmLabel}\n                    autoComplete=\"new-password\"\n                    disabled={isSubmitting}\n                />\n                <ErrorText value={errors.newPassword?.message} />\n                <Spacer size=\"xlarge\" />\n                <SubmitButton disabled={isSubmitting}>{dictionary.forgotPasswordConfirmSubmitButton}</SubmitButton>\n            </Form>\n        )\n    }\n}\n"],"names":["ErrorText","styled","props","marginTop","marginBottom","fontSize","fontWeight","color","height","overflow","React","SecondaryText","fontFamily","letterSpacing","lineHeight","whiteSpace","emailTemplate","useState","useForm","formState","isSubmitting","useEasybase","forgotPasswordConfirm","onSubmit","formData","forgotPassword","forgotRes","setForgottenUsername","setOnConfirm","toast","dictionary","reset","onConfirmSubmit","forgotConfirmRes","setCurrentPage","passwordReqs","minLength","value","message","maxLength","pattern","codeReqs","handleSubmit","size","register","label","codeLabel","disabled","errors","forgotPasswordConfirmLabel","autoComplete","newEmailLabel","onClick","_"],"sourceRoot":""}